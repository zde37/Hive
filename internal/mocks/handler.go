// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zde37/Hive/internal/handler (interfaces: Handler)
//
// Generated by this command:
//
//	mockgen -package mocked -destination internal/mocks/handler.go github.com/zde37/Hive/internal/handler Handler
//

// Package mocked is a generated GoMock package.
package mocked

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// AddFile mocks base method.
func (m *MockHandler) AddFile(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFile indicates an expected call of AddFile.
func (mr *MockHandlerMockRecorder) AddFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockHandler)(nil).AddFile), arg0, arg1)
}

// DeleteFile mocks base method.
func (m *MockHandler) DeleteFile(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockHandlerMockRecorder) DeleteFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockHandler)(nil).DeleteFile), arg0, arg1)
}

// DisplayFileContents mocks base method.
func (m *MockHandler) DisplayFileContents(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayFileContents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisplayFileContents indicates an expected call of DisplayFileContents.
func (mr *MockHandlerMockRecorder) DisplayFileContents(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayFileContents", reflect.TypeOf((*MockHandler)(nil).DisplayFileContents), arg0, arg1)
}

// DownloadFile mocks base method.
func (m *MockHandler) DownloadFile(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockHandlerMockRecorder) DownloadFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockHandler)(nil).DownloadFile), arg0, arg1)
}

// DownloadFolder mocks base method.
func (m *MockHandler) DownloadFolder(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFolder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFolder indicates an expected call of DownloadFolder.
func (mr *MockHandlerMockRecorder) DownloadFolder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFolder", reflect.TypeOf((*MockHandler)(nil).DownloadFolder), arg0, arg1)
}

// GetNodeInfo mocks base method.
func (m *MockHandler) GetNodeInfo(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNodeInfo indicates an expected call of GetNodeInfo.
func (mr *MockHandlerMockRecorder) GetNodeInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeInfo", reflect.TypeOf((*MockHandler)(nil).GetNodeInfo), arg0, arg1)
}

// Health mocks base method.
func (m *MockHandler) Health(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockHandlerMockRecorder) Health(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockHandler)(nil).Health), arg0, arg1)
}

// ListNodes mocks base method.
func (m *MockHandler) ListNodes(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockHandlerMockRecorder) ListNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockHandler)(nil).ListNodes), arg0, arg1)
}

// ListPins mocks base method.
func (m *MockHandler) ListPins(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPins", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPins indicates an expected call of ListPins.
func (mr *MockHandlerMockRecorder) ListPins(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPins", reflect.TypeOf((*MockHandler)(nil).ListPins), arg0, arg1)
}

// Mux mocks base method.
func (m *MockHandler) Mux() *http.ServeMux {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mux")
	ret0, _ := ret[0].(*http.ServeMux)
	return ret0
}

// Mux indicates an expected call of Mux.
func (mr *MockHandlerMockRecorder) Mux() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mux", reflect.TypeOf((*MockHandler)(nil).Mux))
}

// PinObject mocks base method.
func (m *MockHandler) PinObject(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PinObject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PinObject indicates an expected call of PinObject.
func (mr *MockHandlerMockRecorder) PinObject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PinObject", reflect.TypeOf((*MockHandler)(nil).PinObject), arg0, arg1)
}

// PingNode mocks base method.
func (m *MockHandler) PingNode(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingNode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingNode indicates an expected call of PingNode.
func (mr *MockHandlerMockRecorder) PingNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingNode", reflect.TypeOf((*MockHandler)(nil).PingNode), arg0, arg1)
}
