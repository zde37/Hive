// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zde37/Hive/internal/handler (interfaces: Handler)
//
// Generated by this command:
//
//	mockgen -package mocked -destination internal/mocks/handler.go github.com/zde37/Hive/internal/handler Handler
//

// Package mocked is a generated GoMock package.
package mocked

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Mux mocks base method.
func (m *MockHandler) Mux() *http.ServeMux {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mux")
	ret0, _ := ret[0].(*http.ServeMux)
	return ret0
}

// Mux indicates an expected call of Mux.
func (mr *MockHandlerMockRecorder) Mux() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mux", reflect.TypeOf((*MockHandler)(nil).Mux))
}

// addFile mocks base method.
func (m *MockHandler) addFile(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// addFile indicates an expected call of addFile.
func (mr *MockHandlerMockRecorder) addFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addFile", reflect.TypeOf((*MockHandler)(nil).addFile), arg0, arg1)
}

// displayFileContents mocks base method.
func (m *MockHandler) displayFileContents(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "displayFileContents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// displayFileContents indicates an expected call of displayFileContents.
func (mr *MockHandlerMockRecorder) displayFileContents(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "displayFileContents", reflect.TypeOf((*MockHandler)(nil).displayFileContents), arg0, arg1)
}

// downloadFile mocks base method.
func (m *MockHandler) downloadFile(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "downloadFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// downloadFile indicates an expected call of downloadFile.
func (mr *MockHandlerMockRecorder) downloadFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "downloadFile", reflect.TypeOf((*MockHandler)(nil).downloadFile), arg0, arg1)
}

// downloadFolder mocks base method.
func (m *MockHandler) downloadFolder(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "downloadFolder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// downloadFolder indicates an expected call of downloadFolder.
func (mr *MockHandlerMockRecorder) downloadFolder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "downloadFolder", reflect.TypeOf((*MockHandler)(nil).downloadFolder), arg0, arg1)
}

// getNodeInfo mocks base method.
func (m *MockHandler) getNodeInfo(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getNodeInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// getNodeInfo indicates an expected call of getNodeInfo.
func (mr *MockHandlerMockRecorder) getNodeInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNodeInfo", reflect.TypeOf((*MockHandler)(nil).getNodeInfo), arg0, arg1)
}

// getPeers mocks base method.
func (m *MockHandler) getPeers(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getPeers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// getPeers indicates an expected call of getPeers.
func (mr *MockHandlerMockRecorder) getPeers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPeers", reflect.TypeOf((*MockHandler)(nil).getPeers), arg0, arg1)
}

// health mocks base method.
func (m *MockHandler) health(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "health", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// health indicates an expected call of health.
func (mr *MockHandlerMockRecorder) health(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "health", reflect.TypeOf((*MockHandler)(nil).health), arg0, arg1)
}

// listPins mocks base method.
func (m *MockHandler) listPins(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listPins", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// listPins indicates an expected call of listPins.
func (mr *MockHandlerMockRecorder) listPins(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listPins", reflect.TypeOf((*MockHandler)(nil).listPins), arg0, arg1)
}

// pinObject mocks base method.
func (m *MockHandler) pinObject(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "pinObject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// pinObject indicates an expected call of pinObject.
func (mr *MockHandlerMockRecorder) pinObject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "pinObject", reflect.TypeOf((*MockHandler)(nil).pinObject), arg0, arg1)
}

// pingNode mocks base method.
func (m *MockHandler) pingNode(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "pingNode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// pingNode indicates an expected call of pingNode.
func (mr *MockHandlerMockRecorder) pingNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "pingNode", reflect.TypeOf((*MockHandler)(nil).pingNode), arg0, arg1)
}

// unPinObject mocks base method.
func (m *MockHandler) unPinObject(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "unPinObject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// unPinObject indicates an expected call of unPinObject.
func (mr *MockHandlerMockRecorder) unPinObject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "unPinObject", reflect.TypeOf((*MockHandler)(nil).unPinObject), arg0, arg1)
}
