// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zde37/Hive/internal/ipfs (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -package mocked -destination internal/mocks/client.go github.com/zde37/Hive/internal/ipfs Client
//

// Package mocked is a generated GoMock package.
package mocked

import (
	context "context"
	reflect "reflect"

	ipfs "github.com/zde37/Hive/internal/ipfs"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockClient) Add(arg0 context.Context, arg1, arg2 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Add indicates an expected call of Add.
func (mr *MockClientMockRecorder) Add(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockClient)(nil).Add), arg0, arg1, arg2)
}

// DisplayFileContent mocks base method.
func (m *MockClient) DisplayFileContent(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayFileContent", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisplayFileContent indicates an expected call of DisplayFileContent.
func (mr *MockClientMockRecorder) DisplayFileContent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayFileContent", reflect.TypeOf((*MockClient)(nil).DisplayFileContent), arg0, arg1)
}

// DownloadDir mocks base method.
func (m *MockClient) DownloadDir(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadDir", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadDir indicates an expected call of DownloadDir.
func (mr *MockClientMockRecorder) DownloadDir(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadDir", reflect.TypeOf((*MockClient)(nil).DownloadDir), arg0, arg1, arg2)
}

// DownloadFile mocks base method.
func (m *MockClient) DownloadFile(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockClientMockRecorder) DownloadFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockClient)(nil).DownloadFile), arg0, arg1)
}

// GetConnectedPeers mocks base method.
func (m *MockClient) GetConnectedPeers(arg0 context.Context) ([]ipfs.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectedPeers", arg0)
	ret0, _ := ret[0].([]ipfs.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectedPeers indicates an expected call of GetConnectedPeers.
func (mr *MockClientMockRecorder) GetConnectedPeers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectedPeers", reflect.TypeOf((*MockClient)(nil).GetConnectedPeers), arg0)
}

// ListDir mocks base method.
func (m *MockClient) ListDir(arg0 context.Context, arg1 string) ([]ipfs.DirFileDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDir", arg0, arg1)
	ret0, _ := ret[0].([]ipfs.DirFileDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDir indicates an expected call of ListDir.
func (mr *MockClientMockRecorder) ListDir(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDir", reflect.TypeOf((*MockClient)(nil).ListDir), arg0, arg1)
}

// ListPins mocks base method.
func (m *MockClient) ListPins(arg0 context.Context) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPins", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPins indicates an expected call of ListPins.
func (mr *MockClientMockRecorder) ListPins(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPins", reflect.TypeOf((*MockClient)(nil).ListPins), arg0)
}

// NodeInfo mocks base method.
func (m *MockClient) NodeInfo(arg0 context.Context, arg1 string) (ipfs.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeInfo", arg0, arg1)
	ret0, _ := ret[0].(ipfs.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeInfo indicates an expected call of NodeInfo.
func (mr *MockClientMockRecorder) NodeInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeInfo", reflect.TypeOf((*MockClient)(nil).NodeInfo), arg0, arg1)
}

// PinObject mocks base method.
func (m *MockClient) PinObject(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PinObject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PinObject indicates an expected call of PinObject.
func (mr *MockClientMockRecorder) PinObject(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PinObject", reflect.TypeOf((*MockClient)(nil).PinObject), arg0, arg1, arg2)
}

// Ping mocks base method.
func (m *MockClient) Ping(arg0 context.Context, arg1 string) ([]ipfs.PingInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].([]ipfs.PingInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockClientMockRecorder) Ping(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClient)(nil).Ping), arg0, arg1)
}

// UnPinObject mocks base method.
func (m *MockClient) UnPinObject(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnPinObject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnPinObject indicates an expected call of UnPinObject.
func (mr *MockClientMockRecorder) UnPinObject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnPinObject", reflect.TypeOf((*MockClient)(nil).UnPinObject), arg0, arg1)
}
